Options -Indexes
RewriteEngine On

RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !(index\.php|public|css|js|robots\.txt) 
RewriteRule ^ /apps/budget/be/php/v1/web/ [QSA,L]

RewriteCond %{THE_REQUEST} ^src\/(.*) [nc]
RewriteRule ^src\/(.*)$ src/$1 [r=301,nc]

RewriteCond %{THE_REQUEST} /web/([^\s?]*) [NC]
RewriteRule ^ %1 [L,NE,R=302]

RewriteRule ^((?!web/).*)$ web/$1 [L,NC]

# RewriteCond %{THE_REQUEST} ([^\s?]*)
# RewriteRule ^ %1 [L]

# # if %{THE_REQUEST} path starts with "/web/assets/"
# # then get file directly. Used to load css js img
# RewriteCond %{THE_REQUEST} /web/assets/([^\s?]*)
# RewriteRule ^ web/assets/%1 [L]

# RewriteCond %{THE_REQUEST} /web/([^\s?]*)
# RewriteRule ^ /web/%1 [L,NE,R=302]

# RewriteRule ^((?!web/).*)$ web/$1 [L,NC]

# ===========================================================
# SYNTAX DEFINITION
# ===========================================================	
# The %{NAME_OF_VARIABLE} syntax (not simply the % symbol) is 
# simply mod_rewrite's mechanism for accessing one of a 
# predefined list of server variables (specific to mod_rewrite)
# -----------------------------------------------------------
# ~sources 
# https://stackoverflow.com/questions/28290355/what-does-percent-sign-do-in-apaches-httpd-conf
# https://httpd.apache.org/docs/current/expr.html#vars

# ===========================================================
# %{REQUEST_FILENAME}
# ===========================================================	
# The full local filesystem path to the file or script matching 
# the request, if this has already been determined by the server 
# at the time REQUEST_FILENAME is referenced. Otherwise, such as 
# when used in virtual host context, the same value as REQUEST_URI

# ===========================================================
# %{THE_REQUEST}
# ===========================================================	
# The complete request line (e.g., "GET /index.html HTTP/1.1")

# ===========================================================
# %{REQUEST_URI}
# ===========================================================	
# The path component of the requested URI, such as "/index.html". 
# This notably excludes the query string which is available 
# as its own variable named QUERY_STRING.

# ~sources~
# https://cheatography.com/doublehelix/cheat-sheets/the-complete-regex/
# https://al-hiwarnews.com/img/hiwar.pdf
# 
# ===========================================================
# REGEX CHEAT SHEET
# ===========================================================
#   -d  | treated as a filename. True if the file exists and is a directory
# ___________________________________________________________
#   -f  | treated as a filename. True if the file exists and is regular file
# ___________________________________________________________
#    ^  | Start of string or line
# ___________________________________________________________
#    $  | End of string or line
# ___________________________________________________________
#    *  | Zero or more characters
# ___________________________________________________________
#    +  | One or more
# ___________________________________________________________
#    ?  | Zero or One (i.e. optional)
# ___________________________________________________________

#  (?:) | Any “word” character
# ...........................................................
# Non-ca­pture group - groups an expression but does not capture. 
# e.g. /((?:f­oo|­fu)­bar)/ matches "­foo­bar­" or "­fub­ar" without 
# "­foo­" or "­fu" appearing as a captured subpattern.

# (?=) | Any non “word” character
# ...........................................................
# Lookahead - match on the characters following. e.g. /ab(?=c)/ 
# match "­ab" only when followed by "­c"

# (?!) | Whitespace (space, tab CRLF)
# ...........................................................
# Negative lookahead - match on characters that aren't following. 
# e.g. /ab(?!c)/ match "­ab" only when NOT followed by "­c"

# (?<=)| Any non whitepsace character
# ...........................................................
# ___________________________________________________________
#  (?<!)| Any “word” character
# ___________________________________________________________
#   \W  | Any non “word” character
# ___________________________________________________________
#   \s  | Whitespace (space, tab CRLF)
# ___________________________________________________________
#   \S  | Any non whitepsace character
# ___________________________________________________________
#   \d  | Digits (0-9)
# ___________________________________________________________
#   \D  | Any non digit characte
# ___________________________________________________________
#   {n} | n occurrences exactly
# ___________________________________________________________
#  {n,} | At least n occurrences
# ___________________________________________________________
#  {,m} | At most n occurrences
# ___________________________________________________________
#  {n,m}| Between n and m occurrences (inclusive)
# ___________________________________________________________
#    .  | (Period) – Any character except newline
# ___________________________________________________________
#  (...)| Capture group - captures a set of characters for a later expression
# ___________________________________________________________
# -----------------------------------------------------------

# ===========================================================
# APACHE REWRITE RULES
# ===========================================================
# RewriteRule pattern target [Flag1,Flag2,Flag3]

# ===========================================================
# APACHE FLAGS
# ~source~
# https://httpd.apache.org/docs/current/rewrite/flags.html
# ===========================================================
# Flags are added to the end of a rewrite rule to tell Apache 
# how to interpret and handle the rule. They are comma-separated, 
# and contained in square brackets.
# They can be used to tell apache to treat the rule as 
# case-insensitive, to stop processing rules if the current 
# one matches, or a variety of other options.

# C|chain
# ----------------------------------------------------------
# The [C] or [chain] flag indicates that the RewriteRule is 
# chained to the next rule. That is, if the rule matches, 
# then it is processed as usual and control moves on to 
# the next rule. However, if it does not match, then the next 
# rule, and any other rules that are chained together, are 
# skipped.

# DPI|discardpath
# ----------------------------------------------------------
# The DPI flag causes the PATH_INFO portion of the rewritten 
# URI to be discarded.

# END
# ----------------------------------------------------------
# Using the [END] flag terminates not only the current round 
# of rewrite processing (like [L]) but also prevents any 
# subsequent rewrite processing from occurring in per-directory 
# (htaccess) context.
# This does not apply to new requests resulting from external 
# redirects.

# F|forbidden
# ----------------------------------------------------------
# Using the [F] flag causes the server to return a 403 Forbidden 
# status code to the client. 

# L|last
# ----------------------------------------------------------
# The [L] flag causes mod_rewrite to stop processing the rule set. 
# In most contexts, this means that if the rule matches, no further 
# rules will be processed. Use this flag to indicate that the current 
# rule should be applied immediately without considering further rules.

# N|next
# ----------------------------------------------------------
# The [N] flag causes the ruleset to start over again from the top, 
# using the result of the ruleset so far as a starting point. 
# Use with extreme caution, as it may result in loop. 

# NC|nocase
# ----------------------------------------------------------
# Use of the [NC] flag causes the RewriteRule to be matched in a 
# case-insensitive manner. That is, it doesn't care whether letters 
# appear as upper-case or lower-case in the matched URI.

# NE|noescape
# ----------------------------------------------------------
# By default, special characters, such as & and ?, for example, 
# will be converted to their hexcode equivalent. Using the [NE] 
# flag prevents that from happening. 

# NS|nosubreq
# ----------------------------------------------------------
# Use of the [NS] flag prevents the rule from being used on subrequests. 
# For example, a page which is included using an SSI (Server Side Include) 
# is a subrequest, and you may want to avoid rewrites happening on those 
# subrequests. Also, when mod_dir tries to find out information about 
# possible directory default files (such as index.html files), this is 
# an internal subrequest, and you often want to avoid rewrites on such 
# subrequests. On subrequests, it is not always useful, and can even 
# cause errors, if the complete set of rules are applied. Use this 
# flag to exclude problematic rules. 

# QSA|qsappend
# ----------------------------------------------------------
# When the replacement URI contains a query string, the default behavior 
# of RewriteRule is to discard the existing query string, and replace it 
# with the newly generated one. Using the [QSA] flag causes the query 
# strings to be combined. 

# QSD|qsdiscard
# ----------------------------------------------------------
#  When the requested URI contains a query string, and the target URI 
# does not, the default behavior of RewriteRule is to copy that query 
# string to the target URI. Using the [QSD] flag causes the query string 
# to be discarded. 

# QSL|qslast
# ----------------------------------------------------------
# By default, the first (left-most) question mark in the substitution 
# delimits the path from the query string. Using the [QSL] flag instructs 
# RewriteRule to instead split the two components using the last (right-most) 
# question mark.
# This is useful when mapping to files that have literal question marks 
# in their filename. If no query string is used in the substitution, a 
# question mark can be appended to it in combination with this flag. 

# R|redirect
# ----------------------------------------------------------
# Use of the [R] flag causes a HTTP redirect to be issued to the browser. 
# If a fully-qualified URL is specified (that is, including http://servername/) 
# then a redirect will be issued to that location. Otherwise, the current 
# protocol, servername, and port number will be used to generate the URL 
# sent with the redirect.
# Any valid HTTP response status code may be specified, using the syntax 
# [R=305], with a 302 status code being used by default if none is specified. 
# The status code specified need not necessarily be a redirect (3xx) 
# status code. However, if a status code is outside the redirect range 
# (300-399) then the substitution string is dropped entirely, and rewriting 
# is stopped as if the L were used.
# In addition to response status codes, you may also specify redirect 
# status using their symbolic names: temp (default), permanent, or seeother.
# You will almost always want to use [R] in conjunction with [L] (that is, 
# use [R,L]) because on its own, the [R] flag prepends http://thishost[:thisport] 
# to the URI, but then passes this on to the next rule in the ruleset, 
# which can often result in 'Invalid URI in request' warning

# T|type
# ----------------------------------------------------------
# Sets the MIME type with which the resulting response will be sent. . 